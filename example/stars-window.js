window.stars=function(t){var e={};function r(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,r),n.l=!0,n.exports}return r.m=t,r.c=e,r.d=function(t,e,i){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)r.d(i,n,function(e){return t[e]}.bind(null,n));return i},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";r.r(e);const i=new Float32Array([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]);class n{constructor(t,e){Object.assign(this,{gl:t,p:e,i:0,aV:e.map(()=>({})),uV:e.map(()=>({}))}),console.log(this)}use(t){return this.i=t,this.gl.useProgram(this.p[t]),this}attr(t,...e){const r=this.aV[this.i][t]||this.gl.getAttribLocation(this.p[this.i],t);return this.gl[`vertexAttrib${e.length}f`](r,...e),this.aV[this.i][t]=r}unif(t,...e){const r=this.uV[this.i][t]||this.gl.getUniformLocation(this.p[this.i],t);return this.gl[`uniform${e.length}f`](r,...e),this.uV[this.i][t]=r}ua(...t){t.forEach(t=>this.unif(...t))}buff(t,e,r,i=this.gl.FLOAT){return o.buffer(this.gl,e,this.p[this.i],t,r,i)}clear(){this.gl.clearColor(0,0,0,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT)}draw({uniforms:t=[],i:e=this.i,buffName:r="position",verts:n=i,numbersPerVertex:o=2,verticesToDraw:s,type:a=this.gl.TRIANGLES,clear:l=!0}){const u=this;return u.use(e),u.ua(...t),u.buff(r,n,o),l&&u.clear(),void 0===s&&(s=n.length/o),u.gl.drawArrays(a,0,s),u}drawAll(t){this.p.forEach((e,r)=>this.draw({uniforms:t,i:r,clear:!r}))}}const o={GLP:n,SCREEN_TRIANGLE_VERTS:i,SCREEN_TRIANGLES_NUMBERS_PER_VERTEX:2,getRenderingContext:(t,e=!1)=>{const r=document.querySelector(t).getContext("webgl",{antialias:e});return r||alert("Unable to initialize WebGL. Your browser or machine may not support it."),r},loadText:t=>fetch(t).then(t=>t.text()),loadShaders:t=>Promise.all(t.map(t=>o.loadText(t))),compileShader:(t,e,r)=>{const i=t.createShader(e);return t.shaderSource(i,r),t.compileShader(i),i},fullscreen:(t,e=window)=>{t.canvas.width=e.innerWidth,t.canvas.height=e.innerHeight,o.setViewport(t)},setViewport:t=>{t.viewport(0,0,t.canvas.width,t.canvas.height)},compile:(t,e)=>{const r=t.createProgram(),i=[t.VERTEX_SHADER,t.FRAGMENT_SHADER],n=["vertex","fragment"];return e.map((e,s)=>{const a=o.compileShader(t,i[s],e);t.attachShader(r,a),console.log(n[s]+" shader:",t.getShaderInfoLog(a)||"OK")}),t.linkProgram(r),t.useProgram(r),console.log("program:",t.getProgramInfoLog(r)||"OK"),r},buffer:(t,e,r,i,n,o)=>{t.bindBuffer(t.ARRAY_BUFFER,t.createBuffer()),t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW);const s="string"==typeof i?t.getAttribLocation(r,i):i;t.vertexAttribPointer(s,n,o,!1,0,0),t.enableVertexAttribArray(s)},init:async(t,e)=>{const r="string"==typeof t?o.getRenderingContext(t):t,i=e.map(t=>o.loadShaders(t).then(t=>o.compile(r,t))),s=await Promise.all(i);return new n(r,s)}};var s=o;let a=0,l=0,u=0,c=0,h=1;const f=[["../shaders/vshader.glsl","../shaders/starfield-art-fshader.glsl"],["../shaders/vshader.glsl","../shaders/stars-fshader.glsl"]];var g={webglp:s,init:async function(){this.glp=await s.init("#canvas",f),s.fullscreen(this.glp.gl);const{gl:t}=this.glp;console.log("Resolution:",t.canvas.width,t.canvas.height)},move:function(t=0,e=0,r=0){return a+=t,l+=e,u+=r,this},inc:function(t=0){return c+=t,this},zoom:function(t){return h=Math.max(.1,h+t),this},draw:function(){const{glp:t}=this,{gl:e}=t,r=[["viewerPosition",a,l,u],["zoom",h],["iTime",c],["iResolution",e.canvas.width,e.canvas.height],["iMouse",0,0]];return t.drawAll(r),this}};e.default=g}]).default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zdGFycy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zdGFycy8uL25vZGVfbW9kdWxlcy93ZWJnbHAvd2ViZ2xwLmpzIiwid2VicGFjazovL3N0YXJzLy4vc3JjL3N0YXJzLmpzIiwid2VicGFjazovL3N0YXJzLy4vaW5kZXgubWpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiU0NSRUVOX1RSSUFOR0xFX1ZFUlRTIiwiRmxvYXQzMkFycmF5IiwiR0xQIiwiZ2wiLCJhc3NpZ24iLCJ0aGlzIiwiYVYiLCJtYXAiLCJ1ViIsImNvbnNvbGUiLCJsb2ciLCJ1c2VQcm9ncmFtIiwiYXJncyIsImEiLCJnZXRBdHRyaWJMb2NhdGlvbiIsImxlbmd0aCIsInUiLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJmb3JFYWNoIiwidW5pZiIsImRhdGEiLCJzaXplIiwidHlwZSIsIkZMT0FUIiwid2ViZ2xwIiwiYnVmZmVyIiwiY2xlYXJDb2xvciIsImNsZWFyIiwiQ09MT1JfQlVGRkVSX0JJVCIsInVuaWZvcm1zIiwiYnVmZk5hbWUiLCJ2ZXJ0cyIsIm51bWJlcnNQZXJWZXJ0ZXgiLCJ2ZXJ0aWNlc1RvRHJhdyIsIlRSSUFOR0xFUyIsInVzZSIsInVhIiwiYnVmZiIsInVuZGVmaW5lZCIsImRyYXdBcnJheXMiLCJkcmF3IiwiU0NSRUVOX1RSSUFOR0xFU19OVU1CRVJTX1BFUl9WRVJURVgiLCJnZXRSZW5kZXJpbmdDb250ZXh0Iiwic2VsZWN0b3IiLCJhbnRpYWxpYXMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRDb250ZXh0IiwiYWxlcnQiLCJsb2FkVGV4dCIsInVybCIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwidGV4dCIsImxvYWRTaGFkZXJzIiwidXJscyIsIlByb21pc2UiLCJhbGwiLCJjb21waWxlU2hhZGVyIiwic3JjIiwic2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwic2hhZGVyU291cmNlIiwiZnVsbHNjcmVlbiIsIndpbiIsIndpbmRvdyIsImNhbnZhcyIsIndpZHRoIiwiaW5uZXJXaWR0aCIsImhlaWdodCIsImlubmVySGVpZ2h0Iiwic2V0Vmlld3BvcnQiLCJ2aWV3cG9ydCIsImNvbXBpbGUiLCJzaGFkZXJzIiwicHJvZ3JhbSIsImNyZWF0ZVByb2dyYW0iLCJTIiwiVkVSVEVYX1NIQURFUiIsIkZSQUdNRU5UX1NIQURFUiIsIkwiLCJhdHRhY2hTaGFkZXIiLCJnZXRTaGFkZXJJbmZvTG9nIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtSW5mb0xvZyIsImF0dHIiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiY3JlYXRlQnVmZmVyIiwiYnVmZmVyRGF0YSIsIlNUQVRJQ19EUkFXIiwicG9zIiwidmVydGV4QXR0cmliUG9pbnRlciIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5IiwiaW5pdCIsImFzeW5jIiwidXJsc0FyciIsInByb21pc2VzIiwicHJvZ3JhbXMiLCJ4IiwieSIsInoiLCJfem9vbSIsIlNIQURFUlMiLCJnbHAiLCJtb3ZlIiwiZHgiLCJkeSIsImR6IiwiaW5jIiwiZHQiLCJ6b29tIiwiTWF0aCIsIm1heCIsImRyYXdBbGwiXSwibWFwcGluZ3MiOiJ5QkFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdB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QUtPLEVBQ0xOLEdBQUtPLEVBQ0V4RyxNQXlDNkJ5RyxJQXJDckMsU0FBYUMsRUFBSyxHQUVqQixPQURBN0gsR0FBSzZILEVBQ0UxRyxNQW1Da0MyRyxLQWhDMUMsU0FBY0gsR0FFYixPQURBTixFQUFRVSxLQUFLQyxJQXJDRyxHQXFDV1gsRUFBUU0sR0FDNUJ4RyxNQThCd0NtQyxLQTFCaEQsV0FDQyxNQUFNLElBQUNpRSxHQUFPcEcsTUFDUixHQUFDRixHQUFNc0csRUFFUDVFLEVBQVcsQ0FDaEIsQ0FBQyxpQkFBa0J1RSxFQUFHQyxFQUFHQyxHQUN6QixDQUFDLE9BQVFDLEdBQ1QsQ0FBQyxRQUFTckgsR0FDVixDQUFDLGNBQWVpQixFQUFHZ0UsT0FBT0MsTUFBT2pFLEVBQUdnRSxPQUFPRyxRQUMzQyxDQUFDLFNBQVUsRUFBRyxJQWNmLE9BTkFtQyxFQUFJVSxRQUFRdEYsR0FNTHhCLE9DakVPLGUiLCJmaWxlIjoiZGlzdC9zdGFycy13aW5kb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG4iLCJjb25zdCBTQ1JFRU5fVFJJQU5HTEVfVkVSVFMgPSBuZXcgRmxvYXQzMkFycmF5KFtcclxuXHQtMSwgLTEsIC8vIGZpcnN0IHRyaWFuZ2xlXHJcblx0MSwgLTEsXHJcblx0LTEsIDEsXHJcblx0LTEsIDEsIC8vIHNlY29uZCB0cmlhbmdsZVxyXG5cdDEsIC0xLFxyXG5cdDEsIDEsXHJcbl0pLFxyXG5TQ1JFRU5fVFJJQU5HTEVTX05VTUJFUlNfUEVSX1ZFUlRFWCA9IDI7XHJcblxyXG5jbGFzcyBHTFAge1xyXG5cdGNvbnN0cnVjdG9yKGdsLCBwKSB7XHJcblx0XHRPYmplY3QuYXNzaWduKHRoaXMsIHtcclxuXHRcdFx0Z2wsIC8vIHdlYmdsIHJlbmRlcmluZyBjb250ZXh0IG9iamVjdFxyXG5cdFx0XHRwLCAvLyBhcnJheSBvZiBwcm9ncmFtc1xyXG5cdFx0XHRpOiAwLCAvLyBjdXJyZW50IHByb2dyYW1cclxuXHRcdFx0Ly8gdmFyaWFibGVzIC0gaW50ZXJuYWwgc3RvcmFnZSBvZiBhdHRyaWJ1dGVzIGFuZCB1bmlmb3Jtc1xyXG5cdFx0XHQvLyBpbiBhIHBlci1wcm9ncmFtIGFycmF5XHJcblx0XHRcdGFWOiBwLm1hcCgoKT0+KHt9KSksXHJcblx0XHRcdHVWOiBwLm1hcCgoKT0+KHt9KSksXHJcblx0XHR9KTtcclxuXHRcdGNvbnNvbGUubG9nKHRoaXMpO1xyXG5cdH1cclxuXHR1c2UoaSkge1xyXG5cdFx0dGhpcy5pID0gaTtcclxuXHRcdHRoaXMuZ2wudXNlUHJvZ3JhbSh0aGlzLnBbaV0pO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cdC8vIEFuIGF0dHJpYnV0ZSBpcyB2YXJpYWJsZSBhbmQgY2FuIGNvbnRhaW4gYSBmbG9hdCBvciBhIHZlY3RvciAodmVjMiwgdmVjMywgdmVjNCkuXHJcblx0Ly8gWW91ciBwcm9ncmFtIHNob3VsZCBub3QgZXhjZWVkIDE2IGF0dHJpYnV0ZXMgdG8gd29yayBvbiBhbGwgZGV2aWNlcy5cclxuXHRhdHRyKG5hbWUsIC4uLmFyZ3MpIHtcclxuXHRcdGNvbnN0IGEgPSB0aGlzLmFWW3RoaXMuaV1bbmFtZV0gfHwgdGhpcy5nbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLnBbdGhpcy5pXSwgbmFtZSk7XHJcblx0XHR0aGlzLmdsW2B2ZXJ0ZXhBdHRyaWIke2FyZ3MubGVuZ3RofWZgXShhLCAuLi5hcmdzKTtcclxuXHRcdHJldHVybiB0aGlzLmFWW3RoaXMuaV1bbmFtZV0gPSBhO1xyXG5cdH1cclxuXHQvLyBBIHVuaWZvcm0gaXMgY29uc3RhbnQgY2FuIGNvbnRhaW4gYW4gaW50LCBhIGZsb2F0LCBhIHZlY3RvciBvciBhIG1hdHJpeCAobWF0MiwgbWF0MywgbWF0NCkuXHJcblx0Ly8gWW91ciBwcm9ncmFtIHNob3VsZCBub3QgZXhjZWVkIDEyOCB2ZXJ0ZXggdW5pZm9ybXMgYW5kIDY0IGZyYWdtZW50IHVuaWZvcm1zLlxyXG5cdHVuaWYobmFtZSwgLi4uYXJncykge1xyXG5cdFx0Y29uc3QgdSA9IHRoaXMudVZbdGhpcy5pXVtuYW1lXSB8fCB0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0aGlzLnBbdGhpcy5pXSwgbmFtZSk7XHJcblx0XHR0aGlzLmdsW2B1bmlmb3JtJHthcmdzLmxlbmd0aH1mYF0odSwgLi4uYXJncyk7XHJcblx0XHRyZXR1cm4gdGhpcy51Vlt0aGlzLmldW25hbWVdID0gdTtcclxuXHR9XHJcblx0Ly8gU2V0IFVuaWZvcm1zIGZyb20gYW4gYXJyYXlcclxuXHR1YSguLi5hKSB7XHJcblx0XHRhLmZvckVhY2godSA9PiB0aGlzLnVuaWYoLi4udSkpO1xyXG5cdH1cclxuXHRidWZmKG5hbWUsIGRhdGEsIHNpemUsIHR5cGUgPSB0aGlzLmdsLkZMT0FUKSB7XHJcblx0XHRyZXR1cm4gd2ViZ2xwLmJ1ZmZlcih0aGlzLmdsLCBkYXRhLCB0aGlzLnBbdGhpcy5pXSwgbmFtZSwgc2l6ZSwgdHlwZSk7XHJcblx0fVxyXG5cdGNsZWFyKCkge1xyXG5cdFx0dGhpcy5nbC5jbGVhckNvbG9yKDAuLCAwLiwgMC4sIDEuKTsgLy8gU2V0IHRoZSBjbGVhciBjb2xvciAoYmxhY2spXHJcblx0XHQvLyB0aGlzLmdsLmNsZWFyKGdsLkNPTE9SX0JVRkZFUl9CSVQgfCBnbC5ERVBUSF9CVUZGRVJfQklUKTsgLy8gQ2xlYXIgdGhlIGNhbnZhcyBBTkQgdGhlIGRlcHRoIGJ1ZmZlci5cclxuXHRcdHRoaXMuZ2wuY2xlYXIodGhpcy5nbC5DT0xPUl9CVUZGRVJfQklUKTtcclxuXHR9XHJcblx0ZHJhdyh7XHJcblx0XHR1bmlmb3JtcyA9IFtdLFxyXG5cdFx0aSA9IHRoaXMuaSxcclxuXHRcdGJ1ZmZOYW1lID0gJ3Bvc2l0aW9uJyxcclxuXHRcdHZlcnRzID0gU0NSRUVOX1RSSUFOR0xFX1ZFUlRTLFxyXG5cdFx0bnVtYmVyc1BlclZlcnRleCA9IFNDUkVFTl9UUklBTkdMRVNfTlVNQkVSU19QRVJfVkVSVEVYLFxyXG5cdFx0dmVydGljZXNUb0RyYXcsXHJcblx0XHR0eXBlID0gdGhpcy5nbC5UUklBTkdMRVMsXHJcblx0XHRjbGVhciA9IHRydWUsXHJcblx0fSkge1xyXG5cdFx0Y29uc3QgbyA9IHRoaXM7XHJcblx0XHRvLnVzZShpKTtcclxuXHRcdG8udWEoLi4udW5pZm9ybXMpO1xyXG5cdFx0by5idWZmKGJ1ZmZOYW1lLCB2ZXJ0cywgbnVtYmVyc1BlclZlcnRleCk7XHJcblx0XHRpZiAoY2xlYXIpIHsgby5jbGVhcigpOyB9XHJcblx0XHRpZiAodmVydGljZXNUb0RyYXcgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR2ZXJ0aWNlc1RvRHJhdyA9IHZlcnRzLmxlbmd0aCAvIG51bWJlcnNQZXJWZXJ0ZXg7XHJcblx0XHR9XHJcblx0XHRvLmdsLmRyYXdBcnJheXModHlwZSwgMCwgdmVydGljZXNUb0RyYXcpO1xyXG5cdFx0cmV0dXJuIG87XHJcblx0fVxyXG5cdGRyYXdBbGwodW5pZm9ybXMpIHsgLy8gb25seSB3b3JrcyB3aXRoIGNoYW5naW5nIHVuaWZvcm1zIHJpZ2h0IG5vd1xyXG5cdFx0dGhpcy5wLmZvckVhY2goKHAsIGkpID0+IHRoaXMuZHJhdyh7IHVuaWZvcm1zLCBpLCBjbGVhcjogIWkgfSkpO1xyXG5cdH1cclxufVxyXG5cclxuY29uc3Qgd2ViZ2xwID0ge1xyXG5cdEdMUCxcclxuXHRTQ1JFRU5fVFJJQU5HTEVfVkVSVFMsXHJcblx0U0NSRUVOX1RSSUFOR0xFU19OVU1CRVJTX1BFUl9WRVJURVgsXHJcblx0Z2V0UmVuZGVyaW5nQ29udGV4dDogKHNlbGVjdG9yLCBhbnRpYWxpYXMgPSBmYWxzZSkgPT4ge1xyXG5cdFx0Y29uc3QgY2FudmFzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XHJcblx0XHRjb25zdCBnbCA9IGNhbnZhcy5nZXRDb250ZXh0KCd3ZWJnbCcsIHsgYW50aWFsaWFzIH0pOyAvLyBHZXQgdGhlIFdlYkdMIHJlbmRlcmluZyBjb250ZXh0XHJcblx0XHRpZiAoIWdsKSB7XHJcblx0XHRcdGFsZXJ0KCdVbmFibGUgdG8gaW5pdGlhbGl6ZSBXZWJHTC4gWW91ciBicm93c2VyIG9yIG1hY2hpbmUgbWF5IG5vdCBzdXBwb3J0IGl0LicpO1xyXG5cdFx0fVxyXG5cdFx0cmV0dXJuIGdsO1xyXG5cdH0sXHJcblx0bG9hZFRleHQ6ICh1cmwpID0+IHtcclxuXHRcdHJldHVybiBmZXRjaCh1cmwpLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UudGV4dCgpKTtcclxuXHR9LFxyXG5cdGxvYWRTaGFkZXJzOiAodXJscykgPT4ge1xyXG5cdFx0cmV0dXJuIFByb21pc2UuYWxsKHVybHMubWFwKHUgPT4gd2ViZ2xwLmxvYWRUZXh0KHUpKSk7XHJcblx0fSxcclxuXHRjb21waWxlU2hhZGVyOiAoZ2wsIHR5cGUsIHNyYykgPT4ge1xyXG5cdFx0Y29uc3Qgc2hhZGVyID0gZ2wuY3JlYXRlU2hhZGVyKHR5cGUpO1xyXG5cdFx0Z2wuc2hhZGVyU291cmNlKHNoYWRlciwgc3JjKTtcclxuXHRcdGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTtcclxuXHRcdHJldHVybiBzaGFkZXI7XHJcblx0fSxcclxuXHRmdWxsc2NyZWVuOiAoZ2wsIHdpbiA9IHdpbmRvdykgPT4ge1xyXG5cdFx0Z2wuY2FudmFzLndpZHRoID0gd2luLmlubmVyV2lkdGg7XHJcblx0XHRnbC5jYW52YXMuaGVpZ2h0ID0gd2luLmlubmVySGVpZ2h0O1xyXG5cdFx0d2ViZ2xwLnNldFZpZXdwb3J0KGdsKTtcclxuXHR9LFxyXG5cdHNldFZpZXdwb3J0OiAoZ2wpID0+IHtcclxuXHRcdGdsLnZpZXdwb3J0KDAsIDAsIGdsLmNhbnZhcy53aWR0aCwgZ2wuY2FudmFzLmhlaWdodCk7XHJcblx0fSxcclxuXHQvLyBCYXNlZCBvbiBodHRwczovL3hlbS5naXRodWIuaW8vYXJ0aWNsZXMvd2ViZ2wtZ3VpZGUuaHRtbFxyXG5cdC8vIFRPRE86IFJlbW92ZVxyXG5cdC8vIG9yaWdpbmFsQ29tcGlsZTogZnVuY3Rpb24gKGdsLCB2c2hhZGVyLCBmc2hhZGVyKSB7XHJcblx0Ly8gXHRjb25zdCB2cyA9IHRoaXMuY29tcGlsZVNoYWRlcihnbCwgZ2wuVkVSVEVYX1NIQURFUiwgdnNoYWRlcik7XHJcblx0Ly8gXHRjb25zdCBmcyA9IHRoaXMuY29tcGlsZVNoYWRlcihnbCwgZ2wuRlJBR01FTlRfU0hBREVSLCBmc2hhZGVyKTtcclxuXHRcclxuXHQvLyBcdC8vIENyZWF0ZSB0aGUgV2ViR0wgcHJvZ3JhbSBhbmQgdXNlIGl0XHJcblx0Ly8gXHRjb25zdCBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xyXG5cdC8vIFx0Z2wuYVMocHJvZ3JhbSwgdnMpO1xyXG5cdC8vIFx0Z2wuYVMocHJvZ3JhbSwgZnMpO1xyXG5cdC8vIFx0Z2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7XHJcblx0Ly8gXHRnbC51c2VQcm9ncmFtKHByb2dyYW0pO1xyXG5cdFxyXG5cdC8vIFx0Ly8gTG9nIGNvbXBpbGF0aW9uIGVycm9ycywgaWYgYW55XHJcblx0Ly8gXHRjb25zb2xlLmxvZygndmVydGV4IHNoYWRlcjonLCBnbC5nZXRTaGFkZXJJbmZvTG9nKHZzKSB8fCAnT0snKTtcclxuXHQvLyBcdGNvbnNvbGUubG9nKCdmcmFnbWVudCBzaGFkZXI6JywgZ2wuZ2V0U2hhZGVySW5mb0xvZyhmcykgfHwgJ09LJyk7XHJcblx0Ly8gXHRjb25zb2xlLmxvZygncHJvZ3JhbTonLCBnbC5nZXRQcm9ncmFtSW5mb0xvZyhwcm9ncmFtKSB8fCAnT0snKTtcclxuXHJcblx0Ly8gXHRyZXR1cm4gcHJvZ3JhbTtcclxuXHQvLyB9LFxyXG5cdGNvbXBpbGU6IChnbCwgc2hhZGVycykgPT4geyAvLyBzaGFkZXJzID0gYXJyYXkgb2YgdGV4dFxyXG5cdFx0Ly8gQ3JlYXRlIHRoZSBXZWJHTCBwcm9ncmFtXHJcblx0XHRjb25zdCBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xyXG5cclxuXHRcdGNvbnN0IFMgPSBbZ2wuVkVSVEVYX1NIQURFUiwgZ2wuRlJBR01FTlRfU0hBREVSXTtcclxuXHRcdGNvbnN0IEwgPSBbJ3ZlcnRleCcsICdmcmFnbWVudCddO1xyXG5cdFx0c2hhZGVycy5tYXAoKHQsIGkpID0+IHtcclxuXHRcdFx0Y29uc3QgcyA9IHdlYmdscC5jb21waWxlU2hhZGVyKGdsLCBTW2ldLCB0KTtcclxuXHRcdFx0Z2wuYXR0YWNoU2hhZGVyKHByb2dyYW0sIHMpO1xyXG5cdFx0XHRjb25zb2xlLmxvZyhMW2ldICsgJyBzaGFkZXI6JywgZ2wuZ2V0U2hhZGVySW5mb0xvZyhzKSB8fCAnT0snKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdGdsLmxpbmtQcm9ncmFtKHByb2dyYW0pO1xyXG5cdFx0Z2wudXNlUHJvZ3JhbShwcm9ncmFtKTtcclxuXHRcclxuXHRcdGNvbnNvbGUubG9nKCdwcm9ncmFtOicsIGdsLmdldFByb2dyYW1JbmZvTG9nKHByb2dyYW0pIHx8ICdPSycpO1xyXG5cclxuXHRcdHJldHVybiBwcm9ncmFtO1xyXG5cdH0sXHJcblx0YnVmZmVyOiAoZ2wsIGRhdGEsIHByb2dyYW0sIGF0dHIsIHNpemUsIHR5cGUpID0+IHtcclxuXHRcdGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBnbC5jcmVhdGVCdWZmZXIoKSk7XHJcblx0XHRnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgZGF0YSwgZ2wuU1RBVElDX0RSQVcpO1xyXG5cdFx0Y29uc3QgcG9zID0gKHR5cGVvZiBhdHRyID09PSAnc3RyaW5nJykgPyBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCBhdHRyKSA6IGF0dHI7XHJcblx0XHRnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxyXG5cdFx0XHRwb3MsXHQvLyBwb3NpdGlvbiBhdHRyaWJ1dGUgbG9jYXRpb25cclxuXHRcdFx0c2l6ZSxcdC8vICMgb2YgY29tcG9uZW50cyBwZXIgaXRlcmF0aW9uXHJcblx0XHRcdHR5cGUsXHQvLyB3aGF0IHR5cGUgaXMgdGhlIGRhdGE/XHJcblx0XHRcdGZhbHNlLFx0Ly8gZG9uJ3Qgbm9ybWFsaXplIHRoZSBkYXRhXHJcblx0XHRcdDAsXHRcdC8vIDAgPSBtb3ZlIGZvcndhcmQgc2l6ZSAqIHNpemVvZih0eXBlKSBlYWNoIGl0ZXJhdGlvbiB0byBnZXQgdGhlIG5leHQgcG9zaXRpb25cclxuXHRcdFx0MCxcdFx0Ly8gc3RhcnQgYXQgYmVnaW5uaW5nIG9mIHRoZSBidWZmZXJcclxuXHRcdCk7XHJcblx0XHRnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShwb3MpO1xyXG5cdH0sXHJcblx0Ly8gRG8gaXQgYWxsIC0gQ3JlYXRlIGNhbnZhcyByZW5kZXJpbmcgY29udGV4dCwgbG9hZCBzaGFkZXJzLCBjb21waWxlLCBhbmQgcmV0dXJuIHRoZSBjb250ZXh0XHJcblx0Ly8gRmlyc3QgcGFyYW0gY2FuIGVpdGhlciBiZSBhIHNlbGVjdG9yIG9yIGEgR0wgb2JqZWN0XHJcblx0aW5pdDogYXN5bmMgKGEsIHVybHNBcnIpID0+IHtcclxuXHRcdGNvbnN0IGdsID0gKHR5cGVvZiBhID09PSAnc3RyaW5nJykgPyB3ZWJnbHAuZ2V0UmVuZGVyaW5nQ29udGV4dChhKSA6IGE7XHJcblx0XHQvLyBEbyBhbGlhc2VzP1xyXG5cdFx0Ly8gY29uc3QgYWxpYXNlcyA9IHthdHRhY2hTaGFkZXI6ICdhUyd9O1xyXG5cdFx0Ly8gZm9yIChjb25zdCBrIGluIGFsaWFzZXMpIHtcclxuXHRcdC8vIFx0Z2xbYWxpYXNlc1trXV0gPSBnbFtrXTtcclxuXHRcdC8vIH1cclxuXHRcdGNvbnN0IHByb21pc2VzID0gdXJsc0Fyci5tYXAodXJscyA9PiAoXHJcblx0XHRcdHdlYmdscC5sb2FkU2hhZGVycyh1cmxzKS50aGVuKChzKSA9PiB3ZWJnbHAuY29tcGlsZShnbCwgcykpXHJcblx0XHQpKTtcclxuXHRcdGNvbnN0IHByb2dyYW1zID0gYXdhaXQgUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xyXG5cdFx0Ly8gY29uc3QgcHJvZ3JhbSA9IGF3YWl0IHdlYmdscC5sb2FkU2hhZGVycyh1cmxzQXJyWzBdKS50aGVuKChzKSA9PiB3ZWJnbHAuY29tcGlsZShnbCwgcykpO1xyXG5cdFx0Ly8gY29uc29sZS5sb2cocHJvZ3JhbXMpO1xyXG5cdFx0cmV0dXJuIG5ldyBHTFAoZ2wsIHByb2dyYW1zKTtcclxuXHR9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCB3ZWJnbHA7XHJcbiIsImltcG9ydCB3ZWJnbHAgZnJvbSAnd2ViZ2xwJztcclxuXHJcbmNvbnN0IE1JTl9aT09NID0gMC4xO1xyXG5cclxubGV0IHggPSAwLiwgeSA9IDAuLCB6ID0gMC47XHJcbmxldCB0ID0gMC47XHJcbmxldCBfem9vbSA9IDEuO1xyXG5cclxuY29uc3QgU0hBREVSUyA9IFtcclxuXHQvLyBbJy4vc2hhZGVycy92c2hhZGVyLmdsc2wnLCAnLi9zaGFkZXJzL3N0YXJuZXN0LWZzaGFkZXIuZ2xzbCddLFxyXG5cdFsnLi4vc2hhZGVycy92c2hhZGVyLmdsc2wnLCAnLi4vc2hhZGVycy9zdGFyZmllbGQtYXJ0LWZzaGFkZXIuZ2xzbCddLFxyXG5cdFsnLi4vc2hhZGVycy92c2hhZGVyLmdsc2wnLCAnLi4vc2hhZGVycy9zdGFycy1mc2hhZGVyLmdsc2wnXSxcclxuXTtcclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGluaXQoKSB7XHJcblx0dGhpcy5nbHAgPSBhd2FpdCB3ZWJnbHAuaW5pdCgnI2NhbnZhcycsIFNIQURFUlMpO1xyXG5cdHdlYmdscC5mdWxsc2NyZWVuKHRoaXMuZ2xwLmdsKTtcclxuXHRcclxuXHRjb25zdCB7Z2x9ID0gdGhpcy5nbHA7XHJcblx0Y29uc29sZS5sb2coJ1Jlc29sdXRpb246JywgZ2wuY2FudmFzLndpZHRoLCBnbC5jYW52YXMuaGVpZ2h0KTtcclxuXHQvLyBnbC5ibGVuZEZ1bmMoZ2wuU1JDX0FMUEhBLCBnbC5PTkVfTUlOVVNfU1JDX0FMUEhBKTtcclxuXHQvLyBnbC5lbmFibGUoZ2wuQ1VMTF9GQUNFKTtcclxuXHQvLyBnbC5lbmFibGUoZ2wuREVQVEhfVEVTVCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1vdmUoZHggPSAwLCBkeSA9IDAsIGR6ID0gMCkge1xyXG5cdHggKz0gZHg7XHJcblx0eSArPSBkeTtcclxuXHR6ICs9IGR6O1xyXG5cdHJldHVybiB0aGlzO1xyXG59XHJcblxyXG4vKiogSW5jcmVtZW50IHRpbWUgKi9cclxuZnVuY3Rpb24gaW5jKGR0ID0gMCkge1xyXG5cdHQgKz0gZHQ7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHpvb20oZHopIHtcclxuXHRfem9vbSA9IE1hdGgubWF4KE1JTl9aT09NLCBfem9vbSArIGR6KTtcclxuXHRyZXR1cm4gdGhpcztcclxufVxyXG5cclxuLyoqIERyYXcgV2ViR0wgcHJvZ3JhbXMgdG8gdGhlIHNjcmVlbiB3LyBhcHByb3ByaWF0ZSBwYXJhbXMgKHVuaWZvcm1zKSAqL1xyXG5mdW5jdGlvbiBkcmF3KCkge1xyXG5cdGNvbnN0IHtnbHB9ID0gdGhpcztcclxuXHRjb25zdCB7Z2x9ID0gZ2xwO1xyXG5cclxuXHRjb25zdCB1bmlmb3JtcyA9IFtcclxuXHRcdFsndmlld2VyUG9zaXRpb24nLCB4LCB5LCB6XSxcclxuXHRcdFsnem9vbScsIF96b29tXSxcclxuXHRcdFsnaVRpbWUnLCB0XSxcclxuXHRcdFsnaVJlc29sdXRpb24nLCBnbC5jYW52YXMud2lkdGgsIGdsLmNhbnZhcy5oZWlnaHRdLFxyXG5cdFx0WydpTW91c2UnLCAwLCAwXVxyXG5cdF07XHJcblx0Ly8gRXhhbXBsZSB1c2luZyBsb25nZXIgZm9ybWF0czpcclxuXHQvLyBnbHAudWEoLi4udW5pZm9ybXMpO1xyXG5cdC8vIGdscC51bmlmKCd2aWV3ZXJQb3NpdGlvbicsIHgsIHksIHopO1xyXG5cdC8vIGdscC51bmlmKCdpVGltZScsIHQpO1xyXG5cdC8vIGdscC5idWZmKCdwb3NpdGlvbicsIHdlYmdscC5TQ1JFRU5fVFJJQU5HTEVfVkVSVFMsIHdlYmdscC5TQ1JFRU5fVFJJQU5HTEVTX05VTUJFUlNfUEVSX1ZFUlRFWCk7XHJcblxyXG5cdGdscC5kcmF3QWxsKHVuaWZvcm1zKTtcclxuXHQvLyBFeGFtcGxlIGZvciBkcmF3aW5nIHNwZWNpZmljIHByb2dyYW1zOlxyXG5cdC8vIGdscC5kcmF3KHsgdW5pZm9ybXMsIGk6IDAgfSlcclxuXHQvLyBcdC5kcmF3KHsgdW5pZm9ybXMsIGk6IDEsIGNsZWFyOiBmYWxzZSB9KVxyXG5cdC8vIFx0LmRyYXcoeyB1bmlmb3JtcywgaTogMiwgY2xlYXI6IGZhbHNlIH0pO1xyXG5cclxuXHRyZXR1cm4gdGhpcztcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgeyB3ZWJnbHAsIGluaXQsIG1vdmUsIGluYywgem9vbSwgZHJhdyB9O1xyXG4iLCJpbXBvcnQgc3RhcnMgZnJvbSAnLi9zcmMvc3RhcnMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc3RhcnM7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=