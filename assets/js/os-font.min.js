(function(global){"use strict";const REGEX_PART_COLORS=["flash1:","flash2:","flash3:","glow1:","glow2:","glow3:","red:","cyan:","green:","yellow:","purple:","white:"].join("|");const REGEX_PART_ANIMATIONS=["scroll:","slide:","shake:","wave:","wave2:"].join("|");const REGEX_FIND_COLOURS=new RegExp("^(?:"+REGEX_PART_ANIMATIONS+")?("+REGEX_PART_COLORS+").*");const REGEX_FIND_ANIMATIONS=new RegExp("^(?:"+REGEX_PART_COLORS+")?("+REGEX_PART_ANIMATIONS+").*");function getElementContainingText(selector,text,parent){return Array.prototype.filter.call((parent||document).querySelectorAll(selector),function(element){return RegExp(text).test(element.textContent)})}
function getParagraphsContainingText(text,parent){return getElementContainingText("p",text,parent)}
function addClassIfNotExists(cssClass,element){if(element.classList.contains(cssClass)==!1){element.classList.add(cssClass)}}
function spanifyElementText(element){if(element.classList.contains("os-font-spanified")==!1){element.classList.add("os-font-spanified")}else{return}
var html=!1;var text_old=element.innerHTML;var text_new="";for(var i=0;i<text_old.length;i++){if(text_old[i]=="<"){html=!0}
if(text_old[i]==">"){html=!1}
if(html==!1){if(text_old[i]==" "){text_new+='<span>&nbsp;</span>'}else{text_new+='<span>'+text_old[i]+'</span>'}}else{text_new+=text_old[i]}}
element.innerHTML=text_new||"&nbsp;"}
function wrapElementText(element){var wrapper='<div class="os-font-scrollable-wrapper">';wrapper+='<div class="os-font-scrollable">';wrapper+=element.innerHTML;wrapper+='</div>';wrapper+='</div>';element.innerHTML=wrapper}
function processScrollAnimation(element,animation){addClassIfNotExists("os-font",element);addClassIfNotExists("os-font-"+animation,element);stripEffectFromElement(element,animation);wrapElementText(element)}
function processShakeAnimation(element){addClassIfNotExists("os-font",element);addClassIfNotExists("os-font-shake",element);stripEffectFromElement(element,"shake");spanifyElementText(element);var spans=element.querySelectorAll("span");spans.forEach((span,index)=>{span.style["animation-delay"]=((spans.length/100)*index)/100+"s"})}
function processWaveAnimation(element,animation){addClassIfNotExists("os-font",element);addClassIfNotExists("os-font-"+animation,element);stripEffectFromElement(element,animation);spanifyElementText(element);element.querySelectorAll("span").forEach((span,index)=>{span.style["animation-delay"]=(0.075*index)+"s"})}
function processAnimationEffect(element,animation){if(animation=="scroll"||animation=="slide"){processScrollAnimation(element,animation);return}
if(animation=="shake"){processShakeAnimation(element);return}
if(animation=="wave"||animation=="wave2"){processWaveAnimation(element,animation);return}}
function stripEffectFromElement(element,effect){element.innerHTML=element.innerHTML.replace(effect+":","")}
function processColorEffect(element,color){stripEffectFromElement(element,color);addClassIfNotExists("os-font",element);addClassIfNotExists("os-font-"+color,element)}
function getEffectFromElement(element,regex){return element.textContent.match(regex)[1].replace(":","").toLowerCase()||""}
function compile(parent){getParagraphsContainingText(REGEX_FIND_COLOURS,parent).forEach(element=>{processColorEffect(element,getEffectFromElement(element,REGEX_FIND_COLOURS))});getParagraphsContainingText(REGEX_FIND_ANIMATIONS,parent).forEach(element=>{processAnimationEffect(element,getEffectFromElement(element,REGEX_FIND_ANIMATIONS))})}
global.OsFont={compile:compile}})(window)